env:
  GH_TOKEN: ${{ github.token }}
  RELEASEURL: "https://github.com/${{ github.repository }}/releases/download"

on:
  pull_request:
    branches:
      - "main"
  push:
    branches:
      - "main"
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      force-rebuild:
        description: "Force rebuild"
        required: true
        default: false
        type: boolean

# Needed to allow creating a release
permissions:
  contents: write
  packages: write
  id-token: write

# Prevent multiple workflow runs from racing to ensure that pushes are made
# sequentialy for the main branch. Also cancel in progress workflow runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: setup-mkosi
        uses: systemd/mkosi@main
      - name: checkout repo
        uses: actions/checkout@main
      - name: Decrypt large secret
        run: ./scripts/decrypt_secrets.sh
        env:
          SECRET_PASSPHRASE: ${{ secrets.SECRET_PASSPHRASE }}
      - name: build
        run: |
          cp $HOME/secrets/mkosi.crt .
          cp $HOME/secrets/mkosi.key .
          chmod 600 ./mkosi.key
          mkosi build --dependency=base
      - name: oras test
        uses: oras-project/setup-oras@v1
      - run: |
          oras version
          echo $GH_TOKEN | oras login ghcr.io -u bketelsen --password-stdin
      - name: "push main image"
        env:
          PR: ${{ github.event_name == 'pull_request' }}
          FORCE_REBUILD: ${{ inputs.force-rebuild }}
        shell: bash
        run: |
          set -euxo pipefail
          OUTPUTDIR="./mkosi.output"

          # find the first file in the output directory that matches the pattern "DAYO_*.manifest"
          MANIFEST_FILE=$(find "$OUTPUTDIR" -maxdepth 1 -type f -name "DAYO_*.manifest" | head -n 1)
          echo "Found manifest file: $MANIFEST_FILE"

          ARCH=$(jq -r '.config.architecture' "$MANIFEST_FILE")
          VERSION=$(jq -r '.config.version' "$MANIFEST_FILE")
          IMAGE_ID=$(jq -r '.config.name' "$MANIFEST_FILE")
          RELEASE=$(jq -r '.config.release' "$MANIFEST_FILE")
          BASENAME="${IMAGE_ID}_${VERSION}_${ARCH}"
          FILENAME=${IMAGE_ID}_${VERSION}_${ARCH}.raw
          TAGNAME="${VERSION}_${ARCH}"

          find ./mkosi.images/base -type f -exec sha256sum {} \; | sort > ./mkosi.output/inputs
          find ./mkosi.extra/ -type f -exec sha256sum {} \; | sort >> ./mkosi.output/inputs
          sha256sum mkosi.conf >> ./mkosi.output/inputs
          sha256sum mkosi.finalize >> ./mkosi.output/inputs

          cp ./mkosi.output/${BASENAME}.SHA256SUMS ./mkosi.output/SHA256SUMS

          echo "Proceeding to publish new release for: ${TAGNAME}"


          if [[ "${PR}" == "true" ]]; then
            echo "Pull request detected. Skipping release creation for ${TAGNAME}."
            rm -rf  \
              ./${TAGNAME}.raw \
              ./${TAGNAME}.efi \
              ./${TAGNAME}.esp.raw \
              ./${TAGNAME}.usr-x86-64.*.raw \
              ./inputs \
              ./SHA256SUMS \
              ./notes
            exit 0
          fi

          git config --global --add safe.directory "${PWD}"

          cd "mkosi.output"

          echo "Searching for ${FILENAME}"
          ls -la .
          if [[ ! -f ./${FILENAME} ]]; then
            echo "No image built. Skipping."
            exit 0
          fi
          oras push --insecure ghcr.io/bketelsen/dayo:${TAGNAME} ${FILENAME}
